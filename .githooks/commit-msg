#!/usr/bin/env bash
#MIT License
#Copyright (c) 2017-2019 phR0ze
#
#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.

# Read target file and capture Sem Version string and set result
get_version() {
  local file="$1"     # target version file to read from
  local regex="$2"    # version regex to use when looking for version
  local result=$3     # captured version set as result

  # If target exists read line by line and check for match
  if [ -f "$file" ]; then

    # IFS= prevents leading/trailing whitespace from being ignored
    # -r prevents backslash escapes from being interpreted
    # || [[ -n $line ]] prevents the last line from being ignored if it doesn't end with a \n
    while IFS= read -r line || [[ -n "$line" ]]; do
      if [[ "$line" =~ $regex ]]; then
        eval $result="'${BASH_REMATCH[1]}'"
        break
      fi
    done < "$file"
  fi
}

# Read commit message and prepend version if it doesn't exist
prepend_version(){
  local msg=$(<$1)    # read in the message file
  local regex="$2"    # regex to use to detect version in message
  local ver="$3"      # version to use when prepending to message

  # Don't modify the message if a version wasn't given
  if [[ "x$ver" != "x" ]]; then

    # Prepend the version to the message if no version is present
    if ! [[ "$msg" =~ $regex ]]; then
      echo "$ver: $msg" > $1
    else

      # Replace the pepended message version if version present
      echo "$ver: ${BASH_REMATCH[1]}" > $1
    fi
  fi
}

# Prepend version to every commit message (use POSIX ERE for compatibility)
# Note: the cwd is always the full path of your project root
msgfile="$1"
get_version 'VERSION' '([0-9]+\.[0-9]+\.[0-9]+)' ver
prepend_version "$msgfile" '[0-9]+\.[0-9]+\.[0-9]+:[[:space:]]*(.*)' "$ver"

# vim: ts=2:sw=2:sts=2
